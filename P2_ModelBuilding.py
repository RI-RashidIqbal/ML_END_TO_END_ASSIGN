# -*- coding: utf-8 -*-
"""ModelBuilding_MLAsgn02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E2TqDNzgipgbK6i2oPDjOIPSizGAHvwB

# Part 2: Model Building

Objective: Build and evaluate a machine learning model.

# Steps:
- Split the cleaned data into training and testing sets.
- Choose an appropriate machine learning model (e.g., logistic regression,
  decision tree, etc.).
- Train the model on the training data.
- Evaluate the model on the testing data using appropriate metrics (e.g.,   
  accuracy, precision, recall).
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.pipeline import make_pipeline
from sklearn import model_selection
import joblib

from google.colab import drive
drive.mount('/content/drive')

# Step 1: Load the Data

file_path = '/content/drive/MyDrive/DS/ENDTOEND_ML02ASSIGNMENT/house_prices_data.csv'
data = pd.read_csv(file_path)

# Split the cleaned data into training and testing sets.

# Define the features and target
X = data[['Square_Footage', 'Num_Bedrooms', 'House_Age']]
y = data['House_Price']

# Split the data (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Implementing and training a Multiple Linear Regression model.

model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate the Model, Predict the target variable for the test data and evaluate the model.

# Predict house prices on the test set
y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
# Calculate and display MSE and R-squared
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae}")
print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")
print(f"R-squared: {r2}")

# print("Mean Squared Error:", mse)
# print("R-squared:", r2)

# Scatter plot of actual vs predicted values
plt.scatter(y_test, y_pred)
plt.xlabel('Actual House Prices')
plt.ylabel('Predicted House Prices')
plt.title('Actual vs Predicted House Prices')
plt.show()

# Function to predict house prices
def predict_house_price(square_footage, num_bedrooms, house_age):
    input_features = pd.DataFrame({
        'Square_Footage': [square_footage],
        'Num_Bedrooms': [num_bedrooms],
        'House_Age': [house_age]
    })
    predicted_price = model.predict(input_features)
    return predicted_price[0]

# Example prediction
example_price = predict_house_price(2000, 3, 20)
print("Predicted House Price:", example_price)

# Feature importance based on absolute value of coefficients
importance = np.abs(model.coef_)
feature_importance = pd.Series(importance, index=X.columns)

# Plot feature importance
feature_importance.plot(kind='barh')
plt.title('Feature Importance')
plt.show()

# Create a pipeline with StandardScaler and LinearRegression
pipeline = make_pipeline(StandardScaler(), LinearRegression())

# Train the model with normalized data
pipeline.fit(X_train, y_train)

# Predict and evaluate the model with normalized data
y_pred_norm = pipeline.predict(X_test)
mse_norm = mean_squared_error(y_test, y_pred_norm)
r2_norm = r2_score(y_test, y_pred_norm)

print("MSE with Normalization:", mse_norm)
print("R-squared with Normalization:", r2_norm)