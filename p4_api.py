# -*- coding: utf-8 -*-
"""P4_API_MLAsign02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DZCjcmvAZLxDxvzqJSwMCAAU6JfM2epF
"""

!pip install flask
!pip install flask-ngrok

from flask import *
from flask_ngrok import run_with_ngrok

!pip install fastapi nest-asyncio pyngrok uvicorn

!ngrok config add-authtoken 2l1IfiTqVFKIBTOiNQQZznxFuap_62ujjiUjDSDDmVqimcZpG

import joblib
# Load the trained model
model = joblib.load('/content/drive/MyDrive/DS/ENDTOEND_ML02ASSIGNMENT/houserent_model.pkl')

from fastapi import FastAPI
import nest_asyncio
from pyngrok import ngrok
from pydantic import BaseModel
import uvicorn

app = FastAPI()

# Define the input data model using Pydantic
class InputData(BaseModel):
    # ['square_footage', 'num_bedrooms', 'house_age','House_Price']

    square_footage: float
    num_bedrooms: float
    house_age: float


# endpoint to check if the server is running
@app.get("/")
def read_root():
    return {"message": "Model API is up and running!"}

# Endpoint for making predictions
@app.post("/predict")
def predict(input_data: InputData):
    features = [[input_data.square_footage,input_data.num_bedrooms,input_data.house_age]]

    # prediction using the model
    prediction = model.predict(features)

    # Return the prediction result
    return {"prediction": prediction[0]}

ngrok_tunnel = ngrok.connect(8000)
print('Public URL:', ngrok_tunnel.public_url)
nest_asyncio.apply()
uvicorn.run(app, port=8000)